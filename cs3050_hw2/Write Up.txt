Danny Lisamay
Email: Danny_Lisamay@student.uml.edu
hw#2
Write Up

I believe my degree of success with this project is 100%.

    • My approach to this hw was to first understand the given sample code.
        ◦ Similar to hw1
        ◦ The sample code gave helper varibles
      
      mant_s1 = float_32_s1.f_bits.mantissa;
mant_s2 = float_32_s2.f_bits.mantissa;
exp_s1 = float_32_s1.f_bits.exponent;
exp_s2 = float_32_s2.f_bits.exponent;

    • Next I had to reteach myself bitwise opperators. Such as shift.
        ◦ I added the hidden bit (2^23)
        ◦ Then I found which exponent was larger then shifted the mantissa of the smaller exponent.
        ◦ I stored to correct exponent in to the float_union exponent
//Compare exponent and shift smaller mantissa acordingly
if (exp_s1 > exp_s2){
    float_32_rslt.f_bits.exponent = exp_s1;
    shift_count = (exp_s1) - (exp_s2);
    mant_s2 = mant_s2 >> shift_count;


    • Next I added the mantissas and stored it into the new float_union mantissa
    • Removed hidden bit
      
      //Add mantiss
mant_res = mant_s1 + mant_s2;
float_32_rslt.f_bits.mantissa = mant_res;

    • Printed new Float and Hardware computation.

I ran into issues with infinity, and large number when mantissa shifted >= 23. Mantissa was filled with garbage numbers. Had to zero out mantissa for both.
//Carry
if (mant_res >= 8388609) {
    int carry = mant_res / 8388609;
    mant_res = mant_res - (carry * 8388609);
    float_32_rslt.f_bits.exponent = float_32_rslt.f_bits.exponent + (2 >> carry);
    //Handle infinity
if (float_32_rslt.f_bits.exponent >= 255) {
     mant_res = 0;
}
